const std = @import("std");
const rand = std.rand;
const math = std.math;
const mem = std.mem;
const Random = rand.Random;
const testing = std.testing;

const phi = [16]u64{
    0x9e3779b97f4a7c15, 0xf39cc0605cedc834, 0x1082276bf3a27251, 0xf86c6a11d0c18e95,
    0x2767f0b153d27b7f, 0x0347045b5bf1827f, 0x01886f0928403002, 0xc1d64ba40f335e36,
    0xf06ad7ae9717877e, 0x85839d6effbd7dc6, 0x64d325d1c5371682, 0xcadd0cccfdffbbe1,
    0x626e33b8d04b4331, 0xbbf73c790d94f79d, 0x471c4ab3ed3d82a5, 0xfec507705e4ae6e5,
};

const Impl = struct {
    state: [16]u64 = phi,
    output: [16]u64 = undefined,
    counter: [4]u64 = undefined,

    const shuf_offsets = [16]u8{
        2, 3, 0, 1, 5, 6, 7, 4, // left
        3, 0, 1, 2, 6, 7, 4, 5, // right
    };

    pub fn gen(self: *Impl, buf: *[128]u8) void {
        self.writeOutput(buf);
        self.step();
    }

    fn writeOutput(self: *Impl, buf: *[128]u8) void {
        var i: usize = 0;
        while (i < 16) : (i += 1)
            mem.writeIntLittle(u64, buf[i * 8 ..][0..8], self.output[i]);
    }

    inline fn step(self: *Impl) void {
        var i: usize = 0;

        while (i < 2) : (i += 1) {
            const s = self.state[i * 8 ..];
            const o = self.output[i * 4 ..];
            var temp: [8]u64 = undefined;

            var j: usize = 0;
            while (j < 4) : (j += 1)
                s[j + 4] +%= self.counter[j];

            j = 0;
            while (j < 8) : (j += 1)
                temp[j] = (s[shuf_offsets[j]] >> 32) | (s[shuf_offsets[j + 8]] << 32);

            j = 0;
            while (j < 4) : (j += 1) {
                const lo = s[j + 0] >> 1;
                const hi = s[j + 4] >> 3;

                s[j + 0] = lo +% temp[j + 0];
                s[j + 4] = hi +% temp[j + 4];
                o[j] = lo ^ temp[j + 4];
            }
        }

        i = 0;
        while (i < 4) : (i += 1) {
            self.output[i + 8] = self.state[i + 0] ^ self.state[i + 12];
            self.output[i + 12] = self.state[i + 8] ^ self.state[i + 4];
            self.counter[i] +%= 7 - (i * 2);
        }
    }

    fn init(seed: [4]u64) Impl {
        var impl = Impl{};

        var i: usize = 0;
        while (i < 4) : (i += 1) {
            impl.state[i * 2 + 0] ^= seed[i];
            impl.state[i * 2 + 8] ^= seed[(i + 2) % 4];
        }

        i = 0;
        while (i < 13) : (i += 1) {
            impl.step();
            var j: usize = 0;
            while (j < 4) : (j += 1) {
                impl.state[j + 0] = impl.output[j + 12];
                impl.state[j + 4] = impl.output[j + 8];
                impl.state[j + 8] = impl.output[j + 4];
                impl.state[j + 12] = impl.output[j + 0];
            }
        }

        return impl;
    }
};

const seed_zero = [4]u64{ 0, 0, 0, 0 };
const seed_pi = [4]u64{
    0x243f6a8885a308d3,
    0x13198a2e03707344,
    0xa409382229f31d00,
    0x82efa98ec4e6c894,
};
const vector_unseeded = [512]u8{
    0x95, 0x5d, 0x96, 0xf9, 0x0f, 0xb4, 0xaa, 0x53, 0x09, 0x2d, 0x82, 0xe6, 0x3a,
    0x7c, 0x09, 0xe2, 0x2c, 0xa5, 0xa4, 0xa5, 0xa7, 0x5a, 0x5a, 0x39, 0xdc, 0x68,
    0xb4, 0x12, 0x5d, 0xe7, 0xce, 0x2b, 0x6b, 0x6e, 0xfe, 0xf5, 0x8b, 0xd9, 0xcc,
    0x42, 0x12, 0xdd, 0x74, 0x4e, 0x81, 0xfd, 0x18, 0xb9, 0x58, 0xf0, 0x62, 0x5d,
    0x38, 0xef, 0xcc, 0x1b, 0x6f, 0xdb, 0x0d, 0xa3, 0x36, 0xf7, 0xe5, 0xee, 0x6b,
    0xdb, 0xe8, 0xea, 0x5c, 0xda, 0x40, 0xc7, 0x53, 0x44, 0xd0, 0xd5, 0xbf, 0xc1,
    0xd5, 0x07, 0xe0, 0x2c, 0xf5, 0x12, 0x08, 0x71, 0x1b, 0xea, 0x88, 0x82, 0xcf,
    0xd6, 0xcc, 0xf7, 0x1d, 0x06, 0x62, 0xc7, 0x5e, 0xf1, 0x98, 0x5d, 0xf2, 0xc6,
    0xd5, 0x6d, 0x3d, 0x2e, 0x35, 0xda, 0xd6, 0x85, 0x3a, 0xc1, 0x76, 0xb7, 0x4d,
    0xb7, 0xe0, 0x26, 0x51, 0x2d, 0xce, 0x34, 0x8b, 0xa6, 0x03, 0xf1, 0x0e, 0xa2,
    0x7a, 0x7f, 0xcb, 0x03, 0x8c, 0x71, 0xe2, 0xc7, 0x05, 0x7d, 0x8f, 0xef, 0x24,
    0x94, 0x51, 0x97, 0xa6, 0xdd, 0x60, 0x80, 0x98, 0xf9, 0xf4, 0xcc, 0x27, 0x5d,
    0xd1, 0x97, 0x51, 0xad, 0x0f, 0x4b, 0xf6, 0x18, 0x96, 0xc9, 0xc2, 0x84, 0x2e,
    0x34, 0x60, 0x9e, 0x29, 0x16, 0x38, 0x4e, 0x71, 0x9f, 0x7f, 0x05, 0x6c, 0x2a,
    0x70, 0xf4, 0xb8, 0x59, 0x2c, 0x02, 0xd1, 0xd6, 0xf0, 0x91, 0x06, 0x5d, 0xac,
    0x7e, 0xc8, 0xa7, 0x5e, 0x28, 0x25, 0xfd, 0x08, 0x1e, 0x0d, 0xac, 0xbf, 0x1a,
    0x32, 0xc2, 0x2e, 0x82, 0x39, 0x60, 0x6c, 0x41, 0xf1, 0xb1, 0x3c, 0xd6, 0xb5,
    0x9e, 0x04, 0xc4, 0x5a, 0xfb, 0xfe, 0xb3, 0x67, 0x00, 0xa9, 0xef, 0x25, 0x1c,
    0xf5, 0x72, 0xe1, 0xd7, 0x40, 0x85, 0xdb, 0xcc, 0x02, 0x79, 0x49, 0x1d, 0x77,
    0x54, 0x96, 0x21, 0x85, 0x68, 0x7a, 0xe8, 0x41, 0x02, 0xb2, 0x37, 0x02, 0x18,
    0x98, 0x33, 0x5f, 0x44, 0x5d, 0x67, 0x3d, 0xcc, 0x82, 0xd0, 0x3f, 0x78, 0x94,
    0xdc, 0xc2, 0x87, 0x27, 0x39, 0xe4, 0x85, 0x3c, 0xb0, 0xc3, 0x3b, 0xa0, 0x33,
    0x29, 0xf3, 0x46, 0x8b, 0x93, 0xa5, 0x2b, 0x58, 0xb9, 0x42, 0x9a, 0x9b, 0xd1,
    0x4b, 0xac, 0x37, 0x44, 0xdf, 0xee, 0x22, 0x43, 0xd3, 0x0d, 0xe2, 0x11, 0xcf,
    0x49, 0x0e, 0x56, 0xb5, 0x6c, 0x55, 0x40, 0xfc, 0x80, 0xf7, 0x68, 0xfa, 0x47,
    0x25, 0xe7, 0x5a, 0x6d, 0x3e, 0x8f, 0xe7, 0x74, 0xc1, 0x6a, 0x42, 0x8c, 0x42,
    0x92, 0x79, 0xb0, 0x3f, 0xad, 0x49, 0x17, 0x0f, 0xb3, 0x2a, 0xa8, 0x29, 0x00,
    0x09, 0x64, 0xf1, 0xb1, 0xcb, 0xf3, 0x49, 0x22, 0x61, 0xf0, 0xe7, 0x20, 0xdb,
    0x11, 0x8f, 0x05, 0x3d, 0x50, 0xe6, 0x90, 0x4a, 0xc0, 0x76, 0x76, 0x62, 0x61,
    0x43, 0xfa, 0xaf, 0xe0, 0xbd, 0x4e, 0x24, 0x68, 0xf9, 0xae, 0x75, 0x1b, 0x58,
    0x93, 0x81, 0x4b, 0x87, 0x3c, 0xdc, 0x26, 0x3b, 0xfa, 0xa4, 0xca, 0xe7, 0x68,
    0x0b, 0xf0, 0x37, 0x0c, 0x78, 0xd4, 0xd0, 0xcc, 0xaf, 0x54, 0xfd, 0x93, 0x99,
    0xba, 0x47, 0x3f, 0x88, 0x41, 0x7e, 0x61, 0xa6, 0xea, 0x72, 0xa7, 0xee, 0x89,
    0xea, 0xd2, 0x4e, 0x55, 0x99, 0x33, 0xcd, 0xef, 0x29, 0x3a, 0x89, 0xcf, 0xca,
    0x6b, 0x9d, 0x7a, 0x5e, 0x72, 0x7e, 0x34, 0xb5, 0xf7, 0xc8, 0x3f, 0xad, 0x44,
    0xec, 0x25, 0xb7, 0x6b, 0xd7, 0x0e, 0x53, 0x06, 0xe0, 0x9d, 0x0d, 0x9b, 0x44,
    0xc1, 0xd5, 0xc1, 0x4f, 0x9d, 0xcb, 0x8b, 0xbf, 0xaf, 0x7e, 0x0f, 0x6f, 0xfa,
    0xe0, 0x8c, 0x9a, 0x33, 0x4a, 0x25, 0x37, 0x19, 0x11, 0x0d, 0xb5, 0x9d, 0x15,
    0x09, 0x00, 0xe4, 0xaa, 0xef, 0x3d, 0x1a, 0x85, 0x3a, 0xc3, 0xb0, 0x54, 0x03,
    0xa7, 0x50, 0xec, 0x93, 0x8f,
};
const vector_seeded = [512]u8{
    0xfa, 0x62, 0xa9, 0x26, 0xdc, 0x1f, 0xbf, 0x00, 0xf1, 0x3c, 0xe8, 0x68, 0x45,
    0x9b, 0x6f, 0x74, 0x4b, 0xbf, 0x2b, 0x57, 0x50, 0x5e, 0xd8, 0x16, 0x0e, 0x4e,
    0xd9, 0x2a, 0x2e, 0xf6, 0x96, 0x5c, 0x01, 0xb5, 0xc9, 0xe7, 0x9d, 0x84, 0xd8,
    0xd9, 0x5f, 0x0d, 0xb7, 0x4a, 0x47, 0xf4, 0xac, 0xc8, 0x25, 0xcc, 0x0b, 0x2e,
    0x3b, 0x90, 0x03, 0x0a, 0x1d, 0x44, 0x3c, 0xd8, 0x27, 0xa8, 0x42, 0xe0, 0x6e,
    0x8f, 0xa0, 0xc1, 0xb2, 0x8e, 0x18, 0x3d, 0xe3, 0x93, 0x06, 0x79, 0x11, 0xdc,
    0x92, 0x93, 0x0d, 0x85, 0xac, 0xde, 0xdb, 0xb3, 0x23, 0x04, 0xd0, 0xbe, 0xfe,
    0x74, 0xef, 0xbb, 0xbf, 0x19, 0xc1, 0x15, 0x0a, 0x34, 0x78, 0x45, 0xa2, 0x27,
    0x93, 0xb7, 0xb2, 0x4d, 0x4b, 0x4f, 0x6e, 0xb6, 0xc0, 0xdc, 0x42, 0x54, 0x6a,
    0x9b, 0xcd, 0x50, 0x73, 0xfa, 0xa1, 0x9c, 0xb4, 0xd1, 0xd2, 0x87, 0xf1, 0xd6,
    0x97, 0x89, 0x88, 0xa7, 0x7d, 0xcd, 0x12, 0xe8, 0xfa, 0xa2, 0x78, 0x99, 0xc9,
    0x2f, 0x8f, 0xd5, 0x9e, 0x33, 0x7c, 0x42, 0xc6, 0xe9, 0x8b, 0x73, 0x48, 0x73,
    0xfe, 0xfc, 0xef, 0x3a, 0xc5, 0x41, 0x8b, 0x87, 0x3c, 0xfd, 0xc7, 0x3b, 0xff,
    0xd8, 0x83, 0xb3, 0x38, 0x34, 0x8f, 0x4e, 0x3c, 0x10, 0x93, 0xcb, 0x48, 0xab,
    0xa8, 0x23, 0xd2, 0x3d, 0xa1, 0xec, 0x21, 0x69, 0xc9, 0x18, 0xe5, 0x61, 0x96,
    0x93, 0x42, 0xbe, 0x30, 0xe7, 0x8b, 0x48, 0x59, 0xed, 0xe4, 0x7c, 0x26, 0xb6,
    0xc4, 0xdd, 0xbf, 0x36, 0x57, 0xea, 0x9d, 0x5f, 0x1b, 0x05, 0xa5, 0xc2, 0x6c,
    0x5e, 0x57, 0xec, 0xb1, 0x84, 0x2e, 0x16, 0x61, 0x11, 0x67, 0xa3, 0x89, 0xa8,
    0xda, 0xb6, 0x7a, 0x35, 0x51, 0xcb, 0x3a, 0x26, 0x4b, 0xe5, 0x39, 0xd3, 0x9d,
    0x8d, 0xd8, 0x70, 0x73, 0x9f, 0x9b, 0xab, 0x13, 0xe2, 0x7a, 0x49, 0x18, 0x32,
    0x28, 0xc2, 0xac, 0xcd, 0xfa, 0x10, 0x73, 0x55, 0x28, 0xf8, 0x18, 0x6c, 0x4e,
    0x52, 0xdf, 0x54, 0xc8, 0x2c, 0xca, 0xd0, 0x48, 0x31, 0x10, 0x64, 0x68, 0xa4,
    0x52, 0x7f, 0xde, 0x74, 0x93, 0xc7, 0x73, 0x2d, 0xe8, 0x45, 0x74, 0x78, 0x4b,
    0xeb, 0x3f, 0x5e, 0x0a, 0xe0, 0xa0, 0x2e, 0x14, 0xcc, 0xaf, 0xa2, 0x98, 0xde,
    0x47, 0x28, 0x26, 0x8d, 0x20, 0xf6, 0xe3, 0x8c, 0xe8, 0x02, 0x0d, 0xd3, 0xaf,
    0x39, 0x9c, 0x2e, 0xbf, 0x47, 0x81, 0x8d, 0x23, 0x75, 0x34, 0x7f, 0xa4, 0x5e,
    0x3e, 0xb8, 0xd4, 0xa5, 0xcd, 0x97, 0x0b, 0x0f, 0xa6, 0x41, 0x1d, 0x1f, 0x5d,
    0x4f, 0xf6, 0xf2, 0x44, 0xaa, 0x2b, 0x66, 0x00, 0x65, 0xbc, 0xa0, 0x71, 0xc8,
    0xa9, 0x0b, 0x5e, 0x1f, 0xfb, 0x8e, 0x66, 0xf3, 0xa1, 0x16, 0x71, 0xa9, 0x92,
    0x19, 0x43, 0x0d, 0xd6, 0xa2, 0x38, 0xfd, 0xd1, 0xe5, 0x67, 0x29, 0xe8, 0x58,
    0x8d, 0x20, 0x19, 0xa1, 0xca, 0x13, 0x93, 0x01, 0xff, 0x72, 0x97, 0x23, 0x66,
    0xae, 0x85, 0x80, 0x35, 0xd0, 0x74, 0x4e, 0x8f, 0xba, 0x30, 0x7c, 0x61, 0xe6,
    0xb0, 0xb4, 0x11, 0x6a, 0x29, 0x05, 0xc5, 0x0a, 0x27, 0x4e, 0x0b, 0xce, 0x96,
    0xad, 0xfa, 0x41, 0x5a, 0x14, 0x4f, 0xac, 0x24, 0x96, 0x32, 0xae, 0x94, 0x3f,
    0x26, 0x61, 0x57, 0x61, 0xf9, 0xfd, 0x6d, 0x71, 0x23, 0x33, 0x74, 0x17, 0xaa,
    0x2f, 0xa9, 0xbd, 0x2e, 0x07, 0x01, 0xa8, 0x13, 0xed, 0x51, 0x48, 0x11, 0x37,
    0xc7, 0x51, 0x00, 0x7c, 0x9b, 0x76, 0x26, 0x67, 0x06, 0x57, 0x12, 0x94, 0xf8,
    0xd7, 0x92, 0x0d, 0x4f, 0x7a, 0x08, 0xb7, 0xbf, 0x54, 0x6e, 0x09, 0x29, 0x39,
    0xf2, 0x53, 0xaa, 0x49, 0x81, 0xb2, 0x14, 0xee, 0xd2, 0x52, 0x68, 0x4b, 0xe3,
    0xc0, 0x4e, 0x1b, 0x75, 0xed,
};

test "shishua" {
    var buf: [512]u8 = undefined;
    {
        var rng = Impl.init(seed_zero);

        var i: usize = 0;
        while (i < buf.len) : (i += 128)
            rng.gen(buf[i..][0..128]);

        try testing.expectEqualSlices(u8, &vector_unseeded, &buf);
    }
    {
        var rng = Impl.init(seed_pi);

        var i: usize = 0;
        while (i < buf.len) : (i += 128)
            rng.gen(buf[i..][0..128]);

        try testing.expectEqualSlices(u8, &vector_seeded, &buf);
    }
}
